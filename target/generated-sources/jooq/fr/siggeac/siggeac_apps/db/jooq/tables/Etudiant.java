/*
 * This file is generated by jOOQ.
 */
package fr.siggeac.siggeac_apps.db.jooq.tables;


import fr.siggeac.siggeac_apps.db.jooq.Keys;
import fr.siggeac.siggeac_apps.db.jooq.tables.DossierEtudiant.DossierEtudiantPath;
import fr.siggeac.siggeac_apps.db.jooq.tables.Evaluation.EvaluationPath;
import fr.siggeac.siggeac_apps.db.jooq.tables.records.EtudiantRecord;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.DefaultDataType;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Etudiant extends TableImpl<EtudiantRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>etudiant.etudiant</code>
     */
    public static final Etudiant ETUDIANT_ = new Etudiant();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EtudiantRecord> getRecordType() {
        return EtudiantRecord.class;
    }

    /**
     * The column <code>etudiant.etudiant.id_etudiant</code>.
     */
    public final TableField<EtudiantRecord, Integer> ID_ETUDIANT = createField(DSL.name("id_etudiant"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>etudiant.etudiant.id_personne</code>.
     */
    public final TableField<EtudiantRecord, Integer> ID_PERSONNE = createField(DSL.name("id_personne"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>etudiant.etudiant.matricule</code>.
     */
    public final TableField<EtudiantRecord, String> MATRICULE = createField(DSL.name("matricule"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<EtudiantRecord, Object> STATUT = createField(DSL.name("statut"), DefaultDataType.getDefaultDataType("\"public\".\"statut_etudiant\"").nullable(false).defaultValue(DSL.field(DSL.raw("'ACTIF'::statut_etudiant"), org.jooq.impl.SQLDataType.OTHER)), this, "");

    /**
     * The column <code>etudiant.etudiant.date_inscription</code>.
     */
    public final TableField<EtudiantRecord, LocalDate> DATE_INSCRIPTION = createField(DSL.name("date_inscription"), SQLDataType.LOCALDATE.nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_DATE"), SQLDataType.LOCALDATE)), this, "");

    /**
     * The column <code>etudiant.etudiant.filiere</code>.
     */
    public final TableField<EtudiantRecord, String> FILIERE = createField(DSL.name("filiere"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>etudiant.etudiant.niveau</code>.
     */
    public final TableField<EtudiantRecord, Integer> NIVEAU = createField(DSL.name("niveau"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>etudiant.etudiant.created_at</code>.
     */
    public final TableField<EtudiantRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>etudiant.etudiant.updated_at</code>.
     */
    public final TableField<EtudiantRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private Etudiant(Name alias, Table<EtudiantRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Etudiant(Name alias, Table<EtudiantRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>etudiant.etudiant</code> table reference
     */
    public Etudiant(String alias) {
        this(DSL.name(alias), ETUDIANT_);
    }

    /**
     * Create an aliased <code>etudiant.etudiant</code> table reference
     */
    public Etudiant(Name alias) {
        this(alias, ETUDIANT_);
    }

    /**
     * Create a <code>etudiant.etudiant</code> table reference
     */
    public Etudiant() {
        this(DSL.name("etudiant"), null);
    }

    public <O extends Record> Etudiant(Table<O> path, ForeignKey<O, EtudiantRecord> childPath, InverseForeignKey<O, EtudiantRecord> parentPath) {
        super(path, childPath, parentPath, ETUDIANT_);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class EtudiantPath extends Etudiant implements Path<EtudiantRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> EtudiantPath(Table<O> path, ForeignKey<O, EtudiantRecord> childPath, InverseForeignKey<O, EtudiantRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private EtudiantPath(Name alias, Table<EtudiantRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public EtudiantPath as(String alias) {
            return new EtudiantPath(DSL.name(alias), this);
        }

        @Override
        public EtudiantPath as(Name alias) {
            return new EtudiantPath(alias, this);
        }

        @Override
        public EtudiantPath as(Table<?> alias) {
            return new EtudiantPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : fr.siggeac.siggeac_apps.db.jooq.Etudiant.ETUDIANT;
    }

    @Override
    public Identity<EtudiantRecord, Integer> getIdentity() {
        return (Identity<EtudiantRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<EtudiantRecord> getPrimaryKey() {
        return Keys.ETUDIANT_PKEY;
    }

    @Override
    public List<UniqueKey<EtudiantRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.ETUDIANT_MATRICULE_KEY);
    }

    private transient DossierEtudiantPath _dossierEtudiant;

    /**
     * Get the implicit to-many join path to the
     * <code>etudiant.dossier_etudiant</code> table
     */
    public DossierEtudiantPath dossierEtudiant() {
        if (_dossierEtudiant == null)
            _dossierEtudiant = new DossierEtudiantPath(this, null, Keys.DOSSIER_ETUDIANT__DOSSIER_ETUDIANT_ID_ETUDIANT_FKEY.getInverseKey());

        return _dossierEtudiant;
    }

    private transient EvaluationPath _evaluation;

    /**
     * Get the implicit to-many join path to the
     * <code>etudiant.evaluation</code> table
     */
    public EvaluationPath evaluation() {
        if (_evaluation == null)
            _evaluation = new EvaluationPath(this, null, Keys.EVALUATION__EVALUATION_ID_ETUDIANT_FKEY.getInverseKey());

        return _evaluation;
    }

    @Override
    public List<Check<EtudiantRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("etudiant_niveau_check"), "(((niveau >= 1) AND (niveau <= 5)))", true)
        );
    }

    @Override
    public Etudiant as(String alias) {
        return new Etudiant(DSL.name(alias), this);
    }

    @Override
    public Etudiant as(Name alias) {
        return new Etudiant(alias, this);
    }

    @Override
    public Etudiant as(Table<?> alias) {
        return new Etudiant(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Etudiant rename(String name) {
        return new Etudiant(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Etudiant rename(Name name) {
        return new Etudiant(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Etudiant rename(Table<?> name) {
        return new Etudiant(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Etudiant where(Condition condition) {
        return new Etudiant(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Etudiant where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Etudiant where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Etudiant where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Etudiant where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Etudiant where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Etudiant where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Etudiant where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Etudiant whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Etudiant whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
