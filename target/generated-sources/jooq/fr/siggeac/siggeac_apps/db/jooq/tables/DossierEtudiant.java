/*
 * This file is generated by jOOQ.
 */
package fr.siggeac.siggeac_apps.db.jooq.tables;


import fr.siggeac.siggeac_apps.db.jooq.Etudiant;
import fr.siggeac.siggeac_apps.db.jooq.Keys;
import fr.siggeac.siggeac_apps.db.jooq.tables.Etudiant.EtudiantPath;
import fr.siggeac.siggeac_apps.db.jooq.tables.records.DossierEtudiantRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class DossierEtudiant extends TableImpl<DossierEtudiantRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>etudiant.dossier_etudiant</code>
     */
    public static final DossierEtudiant DOSSIER_ETUDIANT = new DossierEtudiant();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DossierEtudiantRecord> getRecordType() {
        return DossierEtudiantRecord.class;
    }

    /**
     * The column <code>etudiant.dossier_etudiant.id_dossier</code>.
     */
    public final TableField<DossierEtudiantRecord, Integer> ID_DOSSIER = createField(DSL.name("id_dossier"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>etudiant.dossier_etudiant.id_etudiant</code>.
     */
    public final TableField<DossierEtudiantRecord, Integer> ID_ETUDIANT = createField(DSL.name("id_etudiant"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>etudiant.dossier_etudiant.annee_academique</code>.
     */
    public final TableField<DossierEtudiantRecord, String> ANNEE_ACADEMIQUE = createField(DSL.name("annee_academique"), SQLDataType.VARCHAR(9).nullable(false), this, "");

    /**
     * The column <code>etudiant.dossier_etudiant.observations</code>.
     */
    public final TableField<DossierEtudiantRecord, String> OBSERVATIONS = createField(DSL.name("observations"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>etudiant.dossier_etudiant.created_at</code>.
     */
    public final TableField<DossierEtudiantRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>etudiant.dossier_etudiant.updated_at</code>.
     */
    public final TableField<DossierEtudiantRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private DossierEtudiant(Name alias, Table<DossierEtudiantRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private DossierEtudiant(Name alias, Table<DossierEtudiantRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>etudiant.dossier_etudiant</code> table reference
     */
    public DossierEtudiant(String alias) {
        this(DSL.name(alias), DOSSIER_ETUDIANT);
    }

    /**
     * Create an aliased <code>etudiant.dossier_etudiant</code> table reference
     */
    public DossierEtudiant(Name alias) {
        this(alias, DOSSIER_ETUDIANT);
    }

    /**
     * Create a <code>etudiant.dossier_etudiant</code> table reference
     */
    public DossierEtudiant() {
        this(DSL.name("dossier_etudiant"), null);
    }

    public <O extends Record> DossierEtudiant(Table<O> path, ForeignKey<O, DossierEtudiantRecord> childPath, InverseForeignKey<O, DossierEtudiantRecord> parentPath) {
        super(path, childPath, parentPath, DOSSIER_ETUDIANT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class DossierEtudiantPath extends DossierEtudiant implements Path<DossierEtudiantRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> DossierEtudiantPath(Table<O> path, ForeignKey<O, DossierEtudiantRecord> childPath, InverseForeignKey<O, DossierEtudiantRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private DossierEtudiantPath(Name alias, Table<DossierEtudiantRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public DossierEtudiantPath as(String alias) {
            return new DossierEtudiantPath(DSL.name(alias), this);
        }

        @Override
        public DossierEtudiantPath as(Name alias) {
            return new DossierEtudiantPath(alias, this);
        }

        @Override
        public DossierEtudiantPath as(Table<?> alias) {
            return new DossierEtudiantPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Etudiant.ETUDIANT;
    }

    @Override
    public Identity<DossierEtudiantRecord, Integer> getIdentity() {
        return (Identity<DossierEtudiantRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DossierEtudiantRecord> getPrimaryKey() {
        return Keys.DOSSIER_ETUDIANT_PKEY;
    }

    @Override
    public List<UniqueKey<DossierEtudiantRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.DOSSIER_ETUDIANT_ID_ETUDIANT_ANNEE_ACADEMIQUE_KEY);
    }

    @Override
    public List<ForeignKey<DossierEtudiantRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DOSSIER_ETUDIANT__DOSSIER_ETUDIANT_ID_ETUDIANT_FKEY);
    }

    private transient EtudiantPath _etudiant;

    /**
     * Get the implicit join path to the <code>etudiant.etudiant</code> table.
     */
    public EtudiantPath etudiant() {
        if (_etudiant == null)
            _etudiant = new EtudiantPath(this, Keys.DOSSIER_ETUDIANT__DOSSIER_ETUDIANT_ID_ETUDIANT_FKEY, null);

        return _etudiant;
    }

    @Override
    public List<Check<DossierEtudiantRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("dossier_etudiant_annee_academique_check"), "(((annee_academique)::text ~ '^[0-9]{4}-[0-9]{4}$'::text))", true)
        );
    }

    @Override
    public DossierEtudiant as(String alias) {
        return new DossierEtudiant(DSL.name(alias), this);
    }

    @Override
    public DossierEtudiant as(Name alias) {
        return new DossierEtudiant(alias, this);
    }

    @Override
    public DossierEtudiant as(Table<?> alias) {
        return new DossierEtudiant(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DossierEtudiant rename(String name) {
        return new DossierEtudiant(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DossierEtudiant rename(Name name) {
        return new DossierEtudiant(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DossierEtudiant rename(Table<?> name) {
        return new DossierEtudiant(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DossierEtudiant where(Condition condition) {
        return new DossierEtudiant(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DossierEtudiant where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DossierEtudiant where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DossierEtudiant where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DossierEtudiant where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DossierEtudiant where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DossierEtudiant where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DossierEtudiant where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DossierEtudiant whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DossierEtudiant whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
