/*
 * This file is generated by jOOQ.
 */
package fr.siggeac.siggeac_apps.db.jooq.tables;


import fr.siggeac.siggeac_apps.db.jooq.Etudiant;
import fr.siggeac.siggeac_apps.db.jooq.Keys;
import fr.siggeac.siggeac_apps.db.jooq.tables.Etudiant.EtudiantPath;
import fr.siggeac.siggeac_apps.db.jooq.tables.records.EvaluationRecord;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.DefaultDataType;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Evaluation extends TableImpl<EvaluationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>etudiant.evaluation</code>
     */
    public static final Evaluation EVALUATION = new Evaluation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EvaluationRecord> getRecordType() {
        return EvaluationRecord.class;
    }

    /**
     * The column <code>etudiant.evaluation.id_evaluation</code>.
     */
    public final TableField<EvaluationRecord, Integer> ID_EVALUATION = createField(DSL.name("id_evaluation"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>etudiant.evaluation.id_etudiant</code>.
     */
    public final TableField<EvaluationRecord, Integer> ID_ETUDIANT = createField(DSL.name("id_etudiant"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>etudiant.evaluation.id_cours</code>.
     */
    public final TableField<EvaluationRecord, Integer> ID_COURS = createField(DSL.name("id_cours"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<EvaluationRecord, Object> TYPE_EVALUATION = createField(DSL.name("type_evaluation"), DefaultDataType.getDefaultDataType("\"public\".\"validation_type\"").nullable(false), this, "");

    /**
     * The column <code>etudiant.evaluation.date_evaluation</code>.
     */
    public final TableField<EvaluationRecord, LocalDate> DATE_EVALUATION = createField(DSL.name("date_evaluation"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>etudiant.evaluation.note</code>.
     */
    public final TableField<EvaluationRecord, BigDecimal> NOTE = createField(DSL.name("note"), SQLDataType.NUMERIC(5, 2).nullable(false), this, "");

    /**
     * The column <code>etudiant.evaluation.coefficient</code>.
     */
    public final TableField<EvaluationRecord, BigDecimal> COEFFICIENT = createField(DSL.name("coefficient"), SQLDataType.NUMERIC(3, 1).nullable(false).defaultValue(DSL.field(DSL.raw("1.0"), SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>etudiant.evaluation.observations</code>.
     */
    public final TableField<EvaluationRecord, String> OBSERVATIONS = createField(DSL.name("observations"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>etudiant.evaluation.created_at</code>.
     */
    public final TableField<EvaluationRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>etudiant.evaluation.updated_at</code>.
     */
    public final TableField<EvaluationRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private Evaluation(Name alias, Table<EvaluationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Evaluation(Name alias, Table<EvaluationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>etudiant.evaluation</code> table reference
     */
    public Evaluation(String alias) {
        this(DSL.name(alias), EVALUATION);
    }

    /**
     * Create an aliased <code>etudiant.evaluation</code> table reference
     */
    public Evaluation(Name alias) {
        this(alias, EVALUATION);
    }

    /**
     * Create a <code>etudiant.evaluation</code> table reference
     */
    public Evaluation() {
        this(DSL.name("evaluation"), null);
    }

    public <O extends Record> Evaluation(Table<O> path, ForeignKey<O, EvaluationRecord> childPath, InverseForeignKey<O, EvaluationRecord> parentPath) {
        super(path, childPath, parentPath, EVALUATION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class EvaluationPath extends Evaluation implements Path<EvaluationRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> EvaluationPath(Table<O> path, ForeignKey<O, EvaluationRecord> childPath, InverseForeignKey<O, EvaluationRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private EvaluationPath(Name alias, Table<EvaluationRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public EvaluationPath as(String alias) {
            return new EvaluationPath(DSL.name(alias), this);
        }

        @Override
        public EvaluationPath as(Name alias) {
            return new EvaluationPath(alias, this);
        }

        @Override
        public EvaluationPath as(Table<?> alias) {
            return new EvaluationPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Etudiant.ETUDIANT;
    }

    @Override
    public Identity<EvaluationRecord, Integer> getIdentity() {
        return (Identity<EvaluationRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<EvaluationRecord> getPrimaryKey() {
        return Keys.EVALUATION_PKEY;
    }

    @Override
    public List<ForeignKey<EvaluationRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EVALUATION__EVALUATION_ID_ETUDIANT_FKEY);
    }

    private transient EtudiantPath _etudiant;

    /**
     * Get the implicit join path to the <code>etudiant.etudiant</code> table.
     */
    public EtudiantPath etudiant() {
        if (_etudiant == null)
            _etudiant = new EtudiantPath(this, Keys.EVALUATION__EVALUATION_ID_ETUDIANT_FKEY, null);

        return _etudiant;
    }

    @Override
    public List<Check<EvaluationRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("evaluation_coefficient_check"), "((coefficient > (0)::numeric))", true),
            Internal.createCheck(this, DSL.name("evaluation_note_check"), "(((note >= (0)::numeric) AND (note <= (20)::numeric)))", true)
        );
    }

    @Override
    public Evaluation as(String alias) {
        return new Evaluation(DSL.name(alias), this);
    }

    @Override
    public Evaluation as(Name alias) {
        return new Evaluation(alias, this);
    }

    @Override
    public Evaluation as(Table<?> alias) {
        return new Evaluation(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Evaluation rename(String name) {
        return new Evaluation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Evaluation rename(Name name) {
        return new Evaluation(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Evaluation rename(Table<?> name) {
        return new Evaluation(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Evaluation where(Condition condition) {
        return new Evaluation(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Evaluation where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Evaluation where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Evaluation where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Evaluation where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Evaluation where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Evaluation where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Evaluation where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Evaluation whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Evaluation whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
